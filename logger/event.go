package golog

import (
	"fmt"
	"time"
)

// The log event struct provides just that, structure for a log messages.
// LogEvents are generated by golog.
type LogEvent struct {
	// The time a log message was received.
	Timestamp time.Time
	// The Level of the log message.
	Level LogLevel
	// The Message templated used to render the displayed log Message.
	Message string
	// Optional properties to add to your structured logs.
	// Properties can include complex objects, simply strings, any
	Args []interface{}
}

// Renders a message as a string.
// The format interface is used to generate a string from a log event
type FormatMessage interface {
	RenderMessage() string
}

// Converts a logevent to a string to display on an output.
// TODO: Provide message template to facilitate formatting.
func (e *LogEvent) RenderMessage() string {

	if len(e.Args) > 0 {

		formattedArgs := formatTemplate(e.Message, e.Args...)
		return fmt.Sprintf("[%s %v] %s", e.Level.ToString(), e.Timestamp.Format("2006-01-02T15:04:05"), formattedArgs)
	}
	return fmt.Sprintf("[%s %v] %s", e.Level.ToString(), e.Timestamp.Format("2006-01-02T15:04:05"), e.Message)
}

func formatTemplate(template string, args ...any) string {
	return fmt.Sprintf(template, args...)
}
